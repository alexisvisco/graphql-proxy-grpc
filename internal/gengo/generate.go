package gengo

import (
	"bytes"
	_ "embed"
	"fmt"
	"github.com/alexisvisco/graphql-proxy-grpc/internal/virtual"
	"google.golang.org/protobuf/compiler/protogen"
	"path"
	"sort"
	"strings"
	"text/template"
)

const header = "// Code generated by graphql-proxy-grpc-protoc. DO NOT EDIT."

//go:embed enum.tmpl
var enumTemplate string

func Generate(descriptor *virtual.Descriptor, plugin *protogen.Plugin) {
	for _, pkg := range descriptor.Packages {
		generateEnumFiles(pkg, plugin)
		generateKeyValueFiles(pkg, plugin)
	}
}

func generateKeyValueFiles(pkg *virtual.Package, plugin *protogen.Plugin) {
	var kv []*virtual.KeyValue
	for _, msg := range pkg.Messages {
		for _, field := range msg.Fields {
			if field.Type.IsKv() {
				kv = append(kv, field.Type.Kv)
			}
		}
	}

	if len(kv) > 0 {
		g := plugin.NewGeneratedFile(path.Join(pkg.Dir, "kv.gql.go"), protogen.GoImportPath(pkg.Path))
		g.P(header)
		g.P()
		g.P(fmt.Sprintf("package %s", pkg.Name))
		g.P()
		for _, keyValue := range kv {
			g.P("type ", keyValue.Identifier.GoName, " struct {")
			g.P("  Key ", keyValue.Key.GoName, "`json:\"key\"`")
			g.P("  Value ", keyValue.Value.PointerForKeyValue(), keyValue.Value.IdentifierForKvValue(), "`json:\"value\"`")
			g.P("}")
			g.P()

		}
	}
}

func generateEnumFiles(pkg *virtual.Package, plugin *protogen.Plugin) {
	if len(pkg.Enums) > 0 {
		g := plugin.NewGeneratedFile(path.Join(pkg.Dir, "enums.gql.go"), protogen.GoImportPath(pkg.Path))
		g.P(header)
		g.P()
		g.P(fmt.Sprintf("package %s", pkg.Name))

		g.QualifiedGoIdent(protogen.GoIdent{GoImportPath: "fmt"})
		g.QualifiedGoIdent(protogen.GoIdent{GoImportPath: "io"})
		g.QualifiedGoIdent(protogen.GoIdent{GoImportPath: "strconv"})

		tmpl, _ := template.New("enum.gql.go").Parse(enumTemplate)

		var enums []*virtual.Enum
		for _, enum := range pkg.Enums {
			enums = append(enums, enum)
		}

		sort.Slice(enums, func(i, j int) bool {
			return strings.Compare(enums[i].Name.GqlName, enums[j].Name.GqlName) == -1
		})

		for _, enum := range enums {
			strEnum := bytes.NewBufferString("")
			_ = tmpl.Execute(strEnum, enum)
			g.P(strEnum)
			g.P()
		}
	}
}
